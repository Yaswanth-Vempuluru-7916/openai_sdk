# client_stdio.py
# Client code for interacting with the MCP server using stdio transport
import asyncio
import os
from google import genai
from google.genai import types
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Validate GEMINI_API_KEY
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("Missing GEMINI_API_KEY in .env file.")

# Initialize Gemini client
try:
    client = genai.Client(api_key=GEMINI_API_KEY)
except ValueError as e:
    raise ValueError(f"Failed to initialize Gemini client: {e}")

# MCP server configuration for stdio
mcp_server = {
    "command": "python",
    "args": ["C:\\Users\\tejes\\Desktop\\Cat\\openai_sdk\\main.py"],  # Assumes main.py is in the same directory or specify full path
}

async def run():
    print("Starting MCP client for stdio transport...")
    server_params = StdioServerParameters(
        command=mcp_server["command"],
        args=mcp_server["args"],
    )
    
    try:
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                await session.initialize()

                # List available tools
                mcp_tools = await session.list_tools()
                if not mcp_tools.tools:
                    print("No tools available from the MCP server.")
                    return

                # Convert MCP tools to Gemini-compatible format
                tools = [
                    types.Tool(
                        function_declarations=[
                            {
                                "name": tool.name,
                                "description": tool.description,
                                "parameters": {
                                    k: v
                                    for k, v in tool.inputSchema.items()
                                    if k not in ["additionalProperties", "$schema"]
                                },
                            }
                        ]
                    )
                    for tool in mcp_tools.tools
                ]

                # Define the prompt
                prompt = (
                    # "What's happening with my transaction with initiator src address 7yTemZj69s9FgtBHp4dMxpW9kMSv7dXAwzvQNC7gqX7h"
                    "What's happening with my transaction with initiator src address 0x29f72597ca8a21F9D925AE9527ec5639bAFD5075"
                    
                )

                # Generate content using Gemini API
                response = client.models.generate_content(
                    model="gemini-2.5-pro-exp-03-25",
                    contents=prompt,
                    config=types.GenerateContentConfig(
                        temperature=0,
                        tools=tools,
                    ),
                )

                # Handle function calls
                if response.candidates and response.candidates[0].content.parts:
                    for part in response.candidates[0].content.parts:
                        if part.function_call:
                            function_call = part.function_call
                            print(f"Calling tool: {function_call.name}")

                            # Call the tool
                            result = await session.call_tool(
                                function_call.name, arguments=dict(function_call.args)
                            )

                            # Print the result
                            print(f"--- Result from {function_call.name} ---")
                            try:
                                # Server returns text, so print it directly
                                print(result.content[0].text)
                            except (IndexError, AttributeError):
                                print("Unexpected result structure from MCP server:")
                                print(result)
                else:
                    print("No function call was generated by the model.")
                    if response.text:
                        print("Model response:")
                        print(response.text)
                    else:
                        print("No response text available.")
    except Exception as e:
        print(f"Error with MCP server: {e}")

if __name__ == "__main__":
    print("Starting MCP client...")
    asyncio.run(run())