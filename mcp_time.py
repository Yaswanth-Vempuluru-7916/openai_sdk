# pip install google-generativeai mcp python-dotenv
import asyncio
import os
import json
from datetime import datetime
from google import genai
from google.genai import types
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Validate GEMINI_API_KEY
api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    raise ValueError(
        "GEMINI_API_KEY not found. Please set it in the .env file or environment variables."
    )

# Initialize Gemini client
try:
    client = genai.Client(api_key=api_key)
except ValueError as e:
    raise ValueError(f"Failed to initialize Gemini client: {e}")

# Configure StdioServerParameters for the time zone MCP server
server_params = StdioServerParameters(
    command="python",
    args=["-m", "mcp_server_time", "--local-timezone=America/New_York"],
)

async def run():
    try:
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                prompt = "What is the current time in India?"
                await session.initialize()

                # List available tools from the MCP server
                mcp_tools = await session.list_tools()
                if not mcp_tools.tools:
                    print("No tools available from MCP server.")
                    return

                tools = [
                    types.Tool(
                        function_declarations=[
                            {
                                "name": tool.name,
                                "description": tool.description,
                                "parameters": {
                                    k: v
                                    for k, v in tool.inputSchema.items()
                                    if k not in ["additionalProperties", "$schema"]
                                },
                            }
                        ]
                    )
                    for tool in mcp_tools.tools
                ]

                # Generate content using Gemini API
                response = client.models.generate_content(
                    model="gemini-2.5-pro-exp-03-25",
                    contents=prompt,
                    config=types.GenerateContentConfig(
                        temperature=0,
                        tools=tools,
                    ),
                )

                # Handle function call from the model
                if response.candidates and response.candidates[0].content.parts and response.candidates[0].content.parts[0].function_call:
                    function_call = response.candidates[0].content.parts[0].function_call

                    # Call the time zone tool
                    result = await session.call_tool(
                        function_call.name, arguments=dict(function_call.args)
                    )

                    # Parse and print formatted JSON result
                    print("--- Formatted Result ---")
                    try:
                        time_data = json.loads(result.content[0].text)
                        print(json.dumps(time_data, indent=2))
                    except json.JSONDecodeError:
                        print("MCP server returned non-JSON response:")
                        print(result.content[0].text)
                    except (IndexError, AttributeError):
                        print("Unexpected result structure from MCP server:")
                        print(result)
                else:
                    print("No function call was generated by the model.")
                    if response.text:
                        print("Model response:")
                        print(response.text)
                    else:
                        print("No response text available.")
    except Exception as e:
        print(f"Error during execution: {e}")

# Run the async function
if __name__ == "__main__":
    print("Starting time zone query...")
    asyncio.run(run())